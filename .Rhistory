# Calcul théorique du MTTFsys
sprintf("MTTFsys théorique calculé : %f ans",
4^(-1/2.5) * 3 * gamma(1 + 1/2.5))
# Simulation d'un MTTF :
sprintf("Une simulation du MTTFsys : %f ans",
mean(replicate(100000,
realisation_panne_système())))
realisation_trajectoire_sys <- function(param, info = FALSE) {
# Fonction pour simuler une trajectoire du système et
# retourner le coût total.
# param est un argument de type list() de la forme :
# param = list(H,x,scale,shape,cmp,cmc)
# Attention :
# H, scale et x sont en jours
# les dates de maintenance préventives prévues
echeancier <- param$x * 1:floor(param$H/param$x)
if (info) {
#debug
print("=== l'échéancier de maintenance préventive ===")
print(echeancier)
print("=== Début de simulation ===")
}
# Le temps courant
t <- 0
# Cout final actuel
Cf <- 0
i <- 1 # un indice
while (t < param$H & i < length(echeancier)) {
next_panne <- t + realisation_panne_système(n = param$n,
scale = param$scale,
shape = param$shape)
if (info) {
# debug
print(paste("Temps courant",t))
print(paste("Date de la prochaine panne : ",next_panne))
print(paste(
"Date de la prochaine maintenance préventive : ",
echeancier[i]))
}
if (next_panne < echeancier[i]) {
# Dans ce cas la prochaine panne si on laisse vivre le système
# arrive avant la prochaine maintenance préventive
# donc on effectue la maintenance corrective
if (info) {print("MC")}
# on met à jour le temps courant
t <- next_panne
# on effectue une maintenance corrective
Cf <- Cf + param$cmc
} else {
if (info) {print("MP")}
# on effecute la maintenance préventive avant une survenue de panne
t <- echeancier[i]
i = i + 1
# on effectue une maintenance préventive
Cf <- Cf + param$cmp
}
if (info) {
print(paste("Temps courant",t))
print(paste("Coût actuel",Cf))
print(paste("val de i",i))
print("---")
}
}
return(Cf)
}
compute_mean_cost_by_time <- function(p = 10000, param_sys) {
# Calcul un coût moyen par unité de temps Cinf(x)
# On chaque trajectoire est divisée par H, l'horizon de simulation
frame <- c()
for (i in 1:p) {
frame <- c(frame,
realisation_trajectoire_sys(param = param_sys,
info = FALSE))
}
frame <- mean(frame/param_sys$H)
return(frame)
}
plot_mean_cost_evolution <- function(list_x, param, p = 1000) {
list_simu <- c()
for (x in list_x) {
param$x <- x
list_simu <- c(list_simu,
compute_mean_cost_by_time(p = p,
param_sys = param))
}
ggplot() +
geom_line(aes(x = list_x, y = list_simu)) +
labs(x = "Périodicité des maintenances",
y = "Coût moyen simulé",
title = "Évolution du coût moyen simulé suivant x")
}
realisation_trajectoire_sys <- function(param, info = FALSE) {
# Fonction pour simuler une trajectoire du système et
# retourner le coût total.
# param est un argument de type list() de la forme :
# param = list(H,x,scale,shape,cmp,cmc)
# Attention :
# H, scale et x sont en jours
# les dates de maintenance préventives prévues
echeancier <- param$x * 1:floor(param$H/param$x)
if (info) {
#debug
print("=== l'échéancier de maintenance préventive ===")
print(echeancier)
print("=== Début de simulation ===")
}
# Le temps courant
t <- 0
# Cout final actuel
Cf <- 0
i <- 1 # un indice
while (t < param$H & i < length(echeancier)) {
next_panne <- t + realisation_panne_système(n = param$n,
scale = param$scale,
shape = param$shape)
if (info) {
# debug
print(paste("Temps courant",t))
print(paste("Date de la prochaine panne : ",next_panne))
print(paste(
"Date de la prochaine maintenance préventive : ",
echeancier[i]))
}
if (next_panne < echeancier[i]) {
# Dans ce cas la prochaine panne si on laisse vivre le système
# arrive avant la prochaine maintenance préventive
# donc on effectue la maintenance corrective
if (info) {print("MC")}
# on met à jour le temps courant
t <- next_panne
# on effectue une maintenance corrective
Cf <- Cf + param$cmc
} else {
if (info) {print("MP")}
# on effecute la maintenance préventive avant une survenue de panne
t <- echeancier[i]
i = i + 1
# on effectue une maintenance préventive
Cf <- Cf + param$cmp
}
if (info) {
print(paste("Temps courant",t))
print(paste("Coût actuel",Cf))
print(paste("val de i",i))
print("---")
}
}
return(Cf)
}
compute_mean_cost_by_time <- function(p = 10000, param_sys) {
# Calcul un coût moyen par unité de temps Cinf(x)
# On chaque trajectoire est divisée par H, l'horizon de simulation
frame <- c()
for (i in 1:p) {
frame <- c(frame,
realisation_trajectoire_sys(param = param_sys,
info = FALSE))
}
frame <- mean(frame/param_sys$H)
return(frame)
}
plot_mean_cost_evolution <- function(list_x, param, p = 1000) {
list_simu <- c()
for (x in list_x) {
param$x <- x
list_simu <- c(list_simu,
compute_mean_cost_by_time(p = p,
param_sys = param))
}
ggplot() +
geom_line(aes(x = list_x, y = list_simu)) +
labs(x = "Périodicité des maintenances",
y = "Coût moyen simulé",
title = "Évolution du coût moyen simulé suivant x")
}
parametres <- list(H = 1000, # on observe sur 1000 ans
x = 1, # on effectue une maintenance préventive tous les
# ans car on a un MTTF de 1.5 environ
n = 4, # nombre de composants
scale = 3, # eta en jours
shape = 2.5, # sans unités
cmc = 10000, # euros
cmp = 1500) # euros
realisation_trajectoire_sys(parametres)
sprintf("Coût moyen pour x = %d an : %f",
parametres$x,
compute_mean_cost_by_time(p = 1000, parametres))
sprintf("Coût moyen pour x = %d an : %f",
parametres$x,
compute_mean_cost_by_time(p = 1000, parametres))
x_values <- seq(1,5,0.5)
parametres <- list(H = 1000, # on observe sur 1002 ans
x = 0, # on effectue une maintenance
#préventive tous les x ans
n = 4,
scale = 3, # eta en jours
shape = 2.5, # sans unités
cmc = 1000, # euros
cmp = 200) # euros
plot_mean_cost_evolution(list_x = x_values, param = parametres)
x_values <- seq(1/12,14/12,1/12)
parametres <- list(H = 1000, # on observe sur 1002 ans
x = 0, # on effectue une maintenance
#préventive tous les x ans
n = 4,
scale = 3, # eta en jours
shape = 2.5, # sans unités
cmc = 1000, # euros
cmp = 200) # euros
plot_mean_cost_evolution(list_x = x_values, param = parametres)
x_values <- seq(8/12,11/12,1/24)
parametres <- list(H = 1000, # on observe sur 1002 ans
x = 0, # on effectue une maintenance
#préventive tous les x ans
n = 4,
scale = 3, # eta en jours
shape = 2.5, # sans unités
cmc = 1000, # euros
cmp = 200) # euros
plot_mean_cost_evolution(list_x = x_values, param = parametres)
setwd("D:/Travail/UTT/Semestres/GI04/RM04/Projets/content")
5/2
0.875*12
realisation_trajectoire_sys_2 <- function(param, info = FALSE) {
# Le temps courant
t <- 0
# Cout final actuel
Cf <- 0
i <- 1 # un indice
if (info) {
print("=== Début de simulation ===")
}
while (t < param$H & i < length(echeancier)) {
echeancier <- param$x * 1:floor((param$H-t)/param$x)
next_panne <- t + realisation_panne_système(n = param$n,
scale = param$scale,
shape = param$shape)
if (info) {
# debug
print(paste("Temps courant",t))
print(paste("Date de la prochaine panne : ",next_panne))
print(paste(
"Date de la prochaine maintenance préventive : ",
echeancier[i]))
}
if (next_panne < echeancier[i]) {
# Dans ce cas la prochaine panne si on laisse vivre le système
# arrive avant la prochaine maintenance préventive
# donc on effectue la maintenance corrective
if (info) {print("MC")}
# on met à jour le temps courant
t <- next_panne
# on effectue une maintenance corrective
Cf <- Cf + param$cmc
} else {
if (info) {print("MP")}
# on effecute la maintenance préventive avant une survenue de panne
t <- echeancier[i]
i = i + 1
# on effectue une maintenance préventive
Cf <- Cf + param$cmp
}
if (info) {
print(paste("Temps courant",t))
print(paste("Coût actuel",Cf))
print(paste("val de i",i))
print("---")
}
}
return(Cf)
}
n <- 11
xlim <- c(0,100)
ylim <- c(0,100)
X <- sample(x = xlim[1]:xlim[2], size = n)
Y <- sample(x = ylim[1]:ylim[2], size = n)
D <- matrix(nrow = n, ncol = n)
for (i in 1:n) {
for (j in 1:n) {
D[i,j] <- sqrt((X[i]-X[j])^2+(Y[i]-Y[j])^2)
}
}
D
rep(0)
rep(0, 10)
T <- rep(0, n+1)
P <- 1:(n-1)
C <- 0
nbr_in <- 0
1:0
1:(0+2)
min <- Inf
a <- 0
for (i in P) {
for (j in T[1:(nbr_in)]) {
if (min > D[i,j]) {
min <- D[i,j]
a <- i
}
}
}
D
[],
D[1,1]
# Permet de calculer les PPI
n <- 11
xlim <- c(0,100)
ylim <- c(0,100)
X <- sample(x = xlim[1]:xlim[2], size = n)
Y <- sample(x = ylim[1]:ylim[2], size = n)
D <- matrix(nrow = n, ncol = n)
for (i in 1:n) {
for (j in 1:n) {
if (i == j) {D[i,j] = Inf} else {
D[i,j] <- sqrt((X[i]-X[j])^2+(Y[i]-Y[j])^2)
}
}
}
D[1,1]
min <- Inf
a <- 0
for (i in P) {
for (j in T[1:(nbr_in)]) {
if (min > D[i,j]) {
min <- D[i,j]
a <- i
}
}
}
T[1:(nbr_in)]
T
P
min <- Inf
a <- 0
for (i in P) {
for (j in T[1:(nbr_in + 2)]) {
if (min > D[i,j]) {
min <- D[i,j]
a <- i
}
}
}
a
i
j
min <- Inf
a <- 0
for (i in P) {
for (j in T[1:(nbr_in + 2)]) {
if (min > D[i,j+1]) {
min <- D[i,j+1]
a <- i
}
}
}
a
T
nbr_in
D[0,3]
D
D[1,3]
source("D:/Travail/UTT/Semestres/GI04/RM04/TD5/UntitledR.R", echo=TRUE)
sum(sata_s1)
sum(data_s1)
length(data_s1)
20 * (20 000 + 60 000)
20 * (20 000 + 60 000)
20*(20000 + 60000)
160000/368846
1600000/368846
80000/mean(data_s1)
sum(data_s2)
length(data_s2)
80000/12
80000*12
960000/360274
80000/mean(data_s2)
mean(data_s1)
mean(data_s2)
(8*80000)/(5*25000)
(8*80000)/(5*2500)
8*3+4+7+1+1+2+7+3
2500 * (3+7+11+4+4+5+11+6) / 8
80000/15937.5
80000/15937.5
(8*80000)/(51*2500)
8*80000
51*2500
640000/127500
2500*(2+6+10+3+3+4+10+5)/8
10000/60
10:9
10:8
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
C
C[T[1],P[1]]
P[1]
T[1]
C[0,2]
C[0,2]
C(0,2)
C
typeof(C)
as.matrix(C)
C
C[1][2]
C[1,2
]
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
[1]
T[1]
T[4]
replicate(n,1)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
Dmin
remove(c(1,2,3),3)
remove(c(1,2,3))
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
Dmin
# Calculer le PPI
n = 14
nodes <- 1:14
X <-  c(0, 2, 3, 4, 5, 7, 0, 2, 5, 7, 3, 4, 6, 7)
Y <-  c(2, 2, 0, 0, 2, 2, 3, 3, 3, 3, 6, 6, 6, 7)
T <- c(1,1)
P <- 2:14
Cout <- 0
C <- matrix(nrow = n, ncol = n)
for (i in nodes) {
for (j in nodes) {
if (i == j) {
C[i,j] = Inf
} else {
C[i,j] = sqrt((X[i]-X[j])^2+(Y[i]+Y[j])^2)
}
}
}
Dmin <- c()
for (i in P) {
Dmin[i-1] <- C[1,i]
}
Dmin
C
C
Dmin
C[1,7]
C[7,1]
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
Dmin
Dmin
# Calculer le PPI
n = 14
nodes <- 1:14
X <-  c(0, 2, 3, 4, 5, 7, 0, 2, 5, 7, 3, 4, 6, 7)
Y <-  c(2, 2, 0, 0, 2, 2, 3, 3, 3, 3, 6, 6, 6, 7)
T <- c(1,1)
P <- 2:14
Cout <- 0
C <- matrix(nrow = n, ncol = n)
for (i in nodes) {
for (j in nodes) {
if (i == j) {
C[i,j] = Inf
} else {
C[i,j] = sqrt((X[i]-X[j])^2+(Y[i]-Y[j])^2)
}
}
}
Dmin <- c()
for (i in P) {
Dmin[i-1] <- C[1,i]
}
Dmin
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
append(c(1,3,2), 5)
append(c(1,3,2), 5, after = 1)
append(c(1,3,2), 5, after = 3)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
sprintf("Insertion entre %d -> %d : ", 2,1)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
T[1]
T[2]
sprintf("Insertion entre %d -> %d : ", T[u], T[u+1])
sprintf("Insertion entre %d -> %d : ", T[1], T[2])
source("D:/Travail/UTT/Semestres/GI04/CL03/TD/PPI/PPI.R", echo=TRUE)
1+2sqrt(2)-sqrt(5)
1+2*sqrt(2)-sqrt(5)
-1+2*sqrt(2)+sqrt(9+4)
setwd("D:/Travail/UTT/Semestres/GI04/RM04/projet-2/maintenance-robot-de-peinture")
